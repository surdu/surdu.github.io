I"<p>As of the writing of this article, this blog‚Äôs content is generated using <a href="https://jekyllrb.com/">Jekyll</a> and hosted on <a href="https://pages.github.com/">GitHub Pages</a>. Until recently all was well: I pushed my code to the <code class="language-plaintext highlighter-rouge">master</code> branch on my website‚Äôs repository and GitHub took care of generating the website for me using Jekyll. All this changed when I started needing to use a custom Jekyll plugin, as GitHub Pages don‚Äôt support custom plugins due to security concerns.</p>

<p>What is needed in order to use GitHub pages with custom plugins is to generate the website locally and then upload the generated content to a special branch on your repository called <code class="language-plaintext highlighter-rouge">gh-pages</code>.</p>

<p>The solution that I‚Äôve implemented involves creating a pre-push git hook that will do the following if it sees a push on the <code class="language-plaintext highlighter-rouge">master</code> branch:</p>

<ol>
  <li>build the Jekyll website locally</li>
  <li>moves the <code class="language-plaintext highlighter-rouge">_site</code> folder that contains the generated website somewhere outside of the current folder (I choose the parent folder for simplicity)</li>
  <li>checkout the <code class="language-plaintext highlighter-rouge">gh-pages</code> branch and remove everything from the working directory</li>
  <li>copy back the content of the <code class="language-plaintext highlighter-rouge">_site</code> folder directly into the current working directory</li>
  <li>commit and push the newly copied content on the <code class="language-plaintext highlighter-rouge">gh-pages</code> branch</li>
</ol>

<p>What we need to do first is to set-up our repository for this purpose.</p>

<p>First thing that we need to do is make sure we have Jekyll installed locally. Please check <a href="https://jekyllrb.com/docs/installation/">Jekyll documentation</a> for that.</p>

<p>Afterwards, we need to make sure we have the <code class="language-plaintext highlighter-rouge">gh-pages</code> branch on the repository. To do this, run the following terminal command in your local repository folder:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git checkout <span class="nt">-b</span> gh-pages
git push origin gh-pages
</code></pre></div></div>

<p>If you already have the <code class="language-plaintext highlighter-rouge">gh-pages</code>, just run <code class="language-plaintext highlighter-rouge">git checkout gh-pages</code>.</p>

<p>Next, we‚Äôll need to make sure this new branch doesn‚Äôt contain anything. This is especially the case when we don‚Äôt do this at the inception of the repository and the <code class="language-plaintext highlighter-rouge">gh-pages</code> will basically inherit the content from the branch we made it from.</p>

<p>To clean the <code class="language-plaintext highlighter-rouge">gh-pages</code> branch, run the following in the terminal:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git checkout gh-pages
<span class="nb">rm</span> <span class="nt">-rf</span> <span class="k">*</span>
git add <span class="nt">-A</span>
git commit <span class="nt">-m</span> <span class="s2">"Initialized gh-pages branch"</span>
git push
</code></pre></div></div>

<p>Now that the <code class="language-plaintext highlighter-rouge">gh-pages</code> branch contains no file, we‚Äôre ready to add the git hook that will take care of generating the content for us.</p>

<p>First let‚Äôs create the git hook file:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">touch</span> .git/hooks/pre-push
</code></pre></div></div>

<p>This will create a file in the <code class="language-plaintext highlighter-rouge">.git/hooks</code> folder called pre-push. Open it in your preferred editor and paste in the following content:</p>

<gist id="gist-a3224b51c37f6f2b6cf1aeb9fc98bd23" data-file="pre-push"></gist>

<p>Please note the comments in the above code (lines starting with #) which explain what each section of the code does. You should find steps that are listed in the beginning of this article.</p>

<p>And that‚Äôs it! Now, every time you push a commit to the <code class="language-plaintext highlighter-rouge">master</code> branch, you <code class="language-plaintext highlighter-rouge">gh-pages</code> branch should be updated with the content of your website.</p>

<p>Hope this helps! üëç</p>
:ET